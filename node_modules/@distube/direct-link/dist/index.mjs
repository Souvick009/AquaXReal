var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });

// src/index.ts
import { request } from "undici";
import { DisTubeError, PlayableExtractorPlugin, Song } from "distube";
var DirectLinkPlugin = class extends PlayableExtractorPlugin {
  static {
    __name(this, "DirectLinkPlugin");
  }
  async validate(url) {
    try {
      const { headers, statusCode } = await request(url, { method: "HEAD" });
      if (statusCode !== 200) return false;
      const types = headers["content-type"];
      const type = Array.isArray(types) ? types[0] : types;
      if (["audio/", "video/", "application/"].some((s) => type?.startsWith(s))) return true;
    } catch {
    }
    return false;
  }
  resolve(url, options = {}) {
    const u = new URL(url);
    return new Song(
      {
        id: u.href,
        name: u.pathname.split("/").pop() || u.href,
        url,
        source: "direct_link",
        playFromSource: true,
        plugin: this
      },
      options
    );
  }
  getStreamURL(song) {
    if (!song.url) {
      throw new DisTubeError("DIRECT_LINK_PLUGIN_INVALID_SONG", "Cannot get stream url from invalid song.");
    }
    return song.url;
  }
  getRelatedSongs() {
    return [];
  }
};
export {
  DirectLinkPlugin
};
//# sourceMappingURL=index.mjs.map