"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  DirectLinkPlugin: () => DirectLinkPlugin
});
module.exports = __toCommonJS(src_exports);
var import_undici = require("undici");
var import_distube = require("distube");
var DirectLinkPlugin = class extends import_distube.PlayableExtractorPlugin {
  static {
    __name(this, "DirectLinkPlugin");
  }
  async validate(url) {
    try {
      const { headers, statusCode } = await (0, import_undici.request)(url, { method: "HEAD" });
      if (statusCode !== 200) return false;
      const types = headers["content-type"];
      const type = Array.isArray(types) ? types[0] : types;
      if (["audio/", "video/", "application/"].some((s) => type?.startsWith(s))) return true;
    } catch {
    }
    return false;
  }
  resolve(url, options = {}) {
    const u = new URL(url);
    return new import_distube.Song(
      {
        id: u.href,
        name: u.pathname.split("/").pop() || u.href,
        url,
        source: "direct_link",
        playFromSource: true,
        plugin: this
      },
      options
    );
  }
  getStreamURL(song) {
    if (!song.url) {
      throw new import_distube.DisTubeError("DIRECT_LINK_PLUGIN_INVALID_SONG", "Cannot get stream url from invalid song.");
    }
    return song.url;
  }
  getRelatedSongs() {
    return [];
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  DirectLinkPlugin
});
//# sourceMappingURL=index.js.map